apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: nginx-argo-app
  namespace: argocd
spec:
  destination:
    server: https://A0C69BC86D23602B5BB044D7CC819839.gr7.us-east-1.eks.amazonaws.com
    namespace: nginx
  source:
    repoURL: https://github.com/brunobaltazar/nginx-argo.git
    path: nginx-argo/dev
    targetRevision: HEAD
  project: default
  syncPolicy:
    automated:
      prune: true        # Prune resources that are no longer in Git
      selfHeal: true      # Automatically sync out-of-sync resources

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: nginx
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: "50%"
      maxUnavailable: "50%"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
      # image: fabricioveronez/web-color:blue
      # image: fabricioveronez/web-color:green
        ports:
        - containerPort: 80
        resources:
          # You must specify requests for CPU to autoscale # based on CPU utilization
          requests:
            cpu: "0.1" # ao atingir 50% do valor do 100 ira criar outro pod
            memory: "64Mi" # minimo para minha aplicação roda alocação de recurso

          limits:
           cpu: "0.5"
           memory: "128Mi"

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: nginx
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer